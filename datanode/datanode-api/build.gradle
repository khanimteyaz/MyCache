apply plugin: 'java'

repositories {
    mavenCentral()
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }

}

//Configures the compile and runtime configurations for our test tests
//and includes the dependencies of the test task.
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile project(":core")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.projectlombok:lombok:1.16.10")
    compile("com.google.guava:guava:22.0")

    providedRuntime("org.slf4j:slf4j-api:1.7.7")
    providedRuntime("org.slf4j:jcl-over-slf4j:1.7.7")
    providedRuntime("ch.qos.logback:logback-classic")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile(group: 'junit', name: 'junit', version: '4.11')
    testCompile (group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3')

    integrationTestCompile 'org.assertj:assertj-core:3.0.0'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
integrationTest {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
bootRepackage.enabled=false
//bootRun {
//    systemProperties
//}
